#!/bin/bash

usage ()
{
  echo 'Usage : updateDynatraceServer -C <new Dynatrace directory> -N <new Dynatrace directory> -F <file> -M <dtmigration.jar path>'
  echo 'i.e.  : updateDynatraceServer -C /opt/dynaTrace-6.1/ -N /opt/dynaTrace-6.2/ -F /tmp/dynaTraceUpgrade.jar/ -M /tmp/dtmigration.jar'
  exit
}

while [ "$1" != "" ]; do
    case $1 in
        -C | --current )        shift
                                dynatraceDirectoryOld=$1
                                ;;
        -N | --new )            shift
                                dynatraceDirectoryNew=$1
                                ;;
        -F | --file )           shift
                                dynatraceInstallFile=$1
                                ;;
		-M | --migration )      shift
                                dtMigrationJar=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

if [ -z $dynatraceDirectoryOld ]; then
	echo "[-C CurrentDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]"
	exit
elif [ -z $dynatraceDirectoryNew ]; then
	echo "[-N NewDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]"
	exit
elif [ -z $dynatraceInstallFile ]; then
	echo "[-F Filename] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]"
	exit
elif [ -z $dtMigrationJar ]
	then
	echo "[-M Migration] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]"
	exit
fi

if [[ $dynatraceDirectoryOld == *"/" ]]; then dynatraceDirectoryOld=`echo $dynatraceDirectoryOld | rev | cut -c 2- | rev`
fi

if [[ $dynatraceDirectoryNew == *"/" ]]; then dynatraceDirectoryNew=`echo $dynatraceDirectoryNew | rev | cut -c 2- | rev`
fi

#New Server Install
echo Installing new Server...
mkdir $dynatraceDirectoryNew
installationResult=$(echo -e N\\n$dynatraceDirectoryNew\\nY\\nY | java -jar $dynatraceInstallFile | tail -1)
if [[ $installationResult == "Installation finished successfully"* ]]; then
	echo Installation finished successfully.
else
	echo Installation failed!
	echo Migration script will exit.
	exit
fi	

#Migration
echo Migrating Files...
#dynatraceDirectory=`find / -type f -name "dtmigration.jar" -printf "%h\n" | sort -u | grep "" -m 1`
migrationResult=$(java -jar $dtMigrationJar -migration -sourceDTHome $dynatraceDirectoryOld -targetDTHome $dynatraceDirectoryNew -silent | grep -o '*MIGRATION_DONE*')
if [[ $migrationResult == *"MIGRATION_DONE_SUCCESSFULLY"* ]]; then
	echo Migration finished successfully.
else
	echo Migration failed!
	echo Migration script will exit.
	exit 
fi
wait ${!}

#Migrate dtserver.ini
if [ -f $dynatraceDirectoryNew/dtserver.ini ] && [ -f $dynatraceDirectoryOld/dtserver.ini ]
	then
		diff -ruN $dynatraceDirectoryNew/dtserver.ini $dynatraceDirectoryNew/dtserver.ini.[Tt]o[Bb]e[Mm]igrated > /tmp/patchfile.patch
		grep -n '@@' /tmp/patchfile.patch > /tmp/patchfileNew.patch
		length=`grep -c '.*' /tmp/patchfileNew.patch`
		echo $length
		if [[ $length == "2" ]]
			then
				deleteFromLine=`grep -n '@@' /tmp/patchfile.patch | cut -c 1-3| tail -1 | grep -o '[0-9]*'`
				deleteToLine=`grep -n "" /tmp/patchfile.patch | cut -c 1-3 | tail -1 | grep -o '[0-9]*'`
				deleteToLine="$deleteToLine"d
				sed -e $deleteFromLine,$deleteToLine /tmp/patchfile.patch > /tmp/patchfileNew.patch
			patch -f -p2 < /tmp/patchfileNew.patch
		elif [[ $length == "0" ]]; then	echo "No patching of .ini file needed"
		else patch -f -p2 < /tmp/patchfile.patch
		fi
		#rm $dynatraceDirectoryNew/dtserver.ini..[Tt]o[Bb]e[Mm]igrated
		rm /tmp/patchfileNew.patch
		rm /tmp/patchfile.patch
		if [ -z `grep -c '.*' $dynatraceDirectoryNew/dtserver.ini`] || [ `grep -c '.*' $dynatraceDirectoryNew/dtserver.ini` == ""] || [ ! -f $dynatraceDirectoryNew/dtserver.ini ]
			then
			echo Migration failed!
			echo Migration script will exit.
			exit
		fi
else
	echo Old or new dtserver.ini could not be found!
	echo Migration script will exit.
	exit
fi

#Migrate dtfrontendserver.ini
if [ -f $dynatraceDirectoryNew/dtfrontendserver.ini ] && [ -f $dynatraceDirectoryOld/dtfrontendserver.ini ]
	then
		diff -ruN $dynatraceDirectoryNew/dtfrontendserver.ini $dynatraceDirectoryNew/dtfrontendserver.ini.[Tt]o[Bb]e[Mm]igrated > /tmp/patchfile.patch
		grep -n '@@' /tmp/patchfile.patch > /tmp/patchfileNew.patch
		length=`grep -c '.*' /tmp/patchfileNew.patch`
		echo $length
		if [[ $length == "2" ]]
			then
				deleteFromLine=`grep -n '@@' /tmp/patchfile.patch | cut -c 1-3| tail -1 | grep -o '[0-9]*'`
				deleteToLine=`grep -n "" /tmp/patchfile.patch | cut -c 1-3 | tail -1 | grep -o '[0-9]*'`
				deleteToLine="$deleteToLine"d
				sed -e $deleteFromLine,$deleteToLine /tmp/patchfile.patch > /tmp/patchfileNew.patch
			patch -f -p0 < /tmp/patchfileNew.patch
		elif [[ $length == "0" ]]; then	echo "No patching of .ini file needed"
		else patch -f -p0 < /tmp/patchfile.patch
		fi
		#rm $dynatraceDirectoryNew/dtfrontendserver.ini.[Tt]o[Bb]e[Mm]igrated
		rm /tmp/patchfileNew.patch
		rm /tmp/patchfile.patch
		if [ -z `grep -c '.*' $dynatraceDirectoryNew/dtfrontendserver.ini`] || [ `grep -c '.*' $dynatraceDirectoryNew/dtfrontendserver.ini` == ""] || [ ! -f $dynatraceDirectoryNew/dtfrontendserver.ini ]
			then
				echo Migration failed!
				echo Migration script will exit.
			exit 
		fi
else
	echo Old or new dtfrontendserver.ini could not be found!
	echo Migration script will exit.
	exit
fi

#Stop old dynaTrace service
echo Stopping Dynatrace...
pidID=`ps -ax | grep 'name dtserver' | grep -v 'grep' | cut -d' ' -f1`
$dynatraceDirectoryOld/init.d/dynaTraceServer stop
if ! [ -z $pidID ]; then
	while [ -e /proc/$pidID ]; do sleep 0.1; done
fi

#Copy Session Files
mkdir $dynatraceDirectoryNew/server/sessions
mkdir $dynatraceDirectoryNew/server/sessions/stored
mv -R $dynatraceDirectoryOld/server/sessions/stored $dynatraceDirectoryNew/server/sessions/stored

#Start new dynaTrace service
echo Starting new Dynatrace service...
$dynatraceDirectoryNew/init.d/dynaTraceServer start

#Removing old Startup scripts
echo Removing old Startup scripts...
cd /etc/init.d/
osVersion=`lsb_release -a | grep 'Distributor ID' -m 1`
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceServer remove
else chkconfig --del dynaTraceServer
fi
rm dynaTraceServer

#Automatic start configuration
echo Adding Startup scripts...
cp $dynatraceDirectoryNew/init.d/dynaTraceServer /etc/init.d/
cd /etc/init.d/
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceServer defaults
else chkconfig --add dynaTraceServer
fi

echo "Script Complete"