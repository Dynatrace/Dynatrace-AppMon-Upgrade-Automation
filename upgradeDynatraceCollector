#!/bin/bash

usage ()
{
  echo 'Usage : updateDynatraceCollector -C <new Dynatrace directory> -N <new Dynatrace directory> -F <file> -M <dtmigration.jar path> -B <64/32 bit>'
  echo 'i.e.  : updateDynatraceCollector -C /opt/dynaTrace-6.1/ -N /opt/dynaTrace-6.2/ -F /tmp/dynaTraceUpgrade.jar -M /tmp/dtmigration.jar -B 64'
  exit
}

while [ "$1" != "" ]; do
    case $1 in
        -C | --current )        shift
								dynatraceDirectoryOld=$1								
                                ;;
        -N | --new )            shift
								dynatraceDirectoryNew=$1								
                                ;;
        -F | --file )           shift
                                dynatraceInstallFile=$1
                                ;;
		-M | --migration )      shift
                                dtMigrationJar=$1
                                ;;
		-B | --bit )        	shift
                                dynatraceBit=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

if [ -z $dynatraceDirectoryOld ]
	then
	echo "[-C CurrentDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]  [-B Bit]"
	exit
elif [ -z $dynatraceDirectoryNew ] 
	then
	echo "[-N NewDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]  [-B Bit]"
	exit
elif [ -z $dynatraceInstallFile ] 
	then
	echo "[-F Filename] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]  [-B Bit]"
	exit
elif [ -z $dtMigrationJar ]
	then
	echo "[-M Migration] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration] [-B Bit]"
	exit
elif [ -z $dynatraceBit ]
	then
	echo "[-B Bit] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-M Migration]  [-B Bit]"
	exit
fi

if [[ $dynatraceDirectoryOld == *"/" ]]; then dynatraceDirectoryOld=`echo $dynatraceDirectoryOld | rev | cut -c 2- | rev`
fi

if [[ $dynatraceDirectoryNew == *"/" ]]; then dynatraceDirectoryNew=`echo $dynatraceDirectoryNew | rev | cut -c 2- | rev`
fi

#New Collector Install
echo Installing new Collector...
mkdir $dynatraceDirectoryNew
installationResult=$(echo -e $dynatraceBit\\nN\\n$dynatraceDirectoryNew\\nY\\nY | java -jar $dynatraceInstallFile | tail -1)
if [[ $installationResult == "Installation finished successfully"* ]]; then
	echo Installation finished successfully.
else

#Migration
echo Migrating Files...
java -jar $dtMigrationJar -migration -sourceDTHome $dynatraceDirectoryOld/ -targetDTHome $dynatraceDirectoryNew/ -silent
wait ${!}

#Migrate dtcollector.ini
if [ -f $dynatraceDirectoryNew/dtcollector.ini ] && [ -f $dynatraceDirectoryOld/dtcollector.ini ]
	then
		diff -ruN $dynatraceDirectoryNew/dtcollector.ini $dynatraceDirectoryNew/dtcollector.ini.[Tt]o[Bb]e[Mm]igrated > /tmp/patchfile.patch
		grep -n '@@' /tmp/patchfile.patch > /tmp/patchfileNew.patch
		length=`grep -c '.*' /tmp/patchfileNew.patch`
		echo $length
		if [[ $length == "2" ]]
			then
				deleteFromLine=`grep -n '@@' /tmp/patchfile.patch | cut -c 1-3| tail -1 | grep -o '[0-9]*'`
				deleteToLine=`grep -n "" /tmp/patchfile.patch | cut -c 1-3 | tail -1 | grep -o '[0-9]*'`
				deleteToLine="$deleteToLine"d
				sed -e $deleteFromLine,$deleteToLine /tmp/patchfile.patch > /tmp/patchfileNew.patch
			patch -f < /tmp/patchfileNew.patch
		elif [[ $length == "0" ]]; then	echo "No patching of .ini file needed"
		else patch -f < /tmp/patchfile.patch
		fi
else
	echo Old or new dtcollector.ini could not be found!
	echo Migration script will exit.
	exit
fi
#rm $dynatraceDirectoryNew/dtcollector.ini.[Tt]o[Bb]e[Mm]igrated
rm /tmp/patchfileNew.patch
rm /tmp/patchfile.patch
if [ -z `grep -c '.*' $dynatraceDirectoryNew/dtcollector.ini` ] || [ `grep -c '.*' $dynatraceDirectoryNew/dtcollector.ini` == "" ] || [ ! -f $dynatraceDirectoryNew/dtcollector.ini ]
	then
		echo Migration failed!
		echo Migration script will exit.
	exit
fi

#Stop old dynaTrace service
echo Stopping Dynatrace...
pidID=`ps -ax | grep 'name dtcollector' | grep -v 'grep' | cut -d' ' -f1`
$dynatraceDirectoryOld/init.d/dynaTraceCollector stop  
if ! [ -z $pidID ]; then
	while [ -e /proc/$pidID ]; do sleep 0.1; done
fi

#Start new dynaTrace service
echo Starting new Dynatrace service...
$dynatraceDirectoryNew/init.d/dynaTraceCollector start

#Removing old Startup scripts
echo Removing old Startup scripts...
cd /etc/init.d/
osVersion=`lsb_release -a | grep 'Distributor ID' -m 1`
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceCollector remove
else chkconfig --del dynaTraceCollector
fi
rm dynaTraceCollector

#Automatic start configuration
echo Adding Startup scripts...
cp $dynatraceDirectoryNew/init.d/dynaTraceCollector /etc/init.d/
cd /etc/init.d/
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceCollector defaults
else chkconfig --add dynaTraceCollector
fi

echo Script Complete