#!/bin/bash

usage ()
{
  echo 'Usage : updateDynatraceAnalysisServer.sh -C <new Dynatrace directory> -N <new Dynatrace directory> -F <file> -B <64/32 bit>'
  echo 'i.e.  : updateDynatraceAnalysisServer.sh -C /opt/dynaTrace-6.1/ -N /opt/dynaTrace-6.2/ -F /tmp/dynaTraceUpgrade.jar -B 64'
  exit
}

while [ "$1" != "" ]; do
    case $1 in
        -C | --current )        shift
                                dynatraceDirectoryOld=$1
                                ;;
        -N | --new )            shift
                                dynatraceDirectoryNew=$1
                                ;;
        -F | --file )           shift
                                dynatraceInstallFile=$1
                                ;;
		-B | --bit )        	shift
                                dynatraceBit=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

if [ -z $dynatraceDirectoryOld ]
	then
	echo "[-C CurrentDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-B Bit]"
	exit
elif [ -z $dynatraceDirectoryNew ] 
	then
	echo "[-N NewDynatraceDirectory] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-B Bit]"
	exit
elif [ -z $dynatraceInstallFile ] 
	then
	echo "[-F Filename] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-B Bit]"
	exit
elif [ -z $dynatraceBit ]
	then
	echo "[-B Bit] arugment has not been supplied"
	echo "Please provide all parameters [-C CurrentDynatraceDirectory] [-N NewDynatraceDirectory] [-F Filename] [-B Bit]"
	exit
fi

if [[ $dynatraceDirectoryOld == *"/" ]]; then dynatraceDirectoryOld=`echo $dynatraceDirectoryOld | rev | cut -c 2- | rev`
fi

if [[ $dynatraceDirectoryNew == *"/" ]]; then dynatraceDirectoryNew=`echo $dynatraceDirectoryNew | rev | cut -c 2- | rev`
fi

#New Analysis Server Install
echo Installing new Analysis Server...
mkdir $dynatraceDirectoryNew
echo -e $dynatraceBit\\nN\\n$dynatraceDirectoryNew\\nY\\nY | java -jar $dynatraceInstallFile | tail -1

#Migrate dtanalysis.ini
echo Migrating Files...
diff -ruN $dynatraceDirectoryNew/dtanalysisserver.ini $dynatraceDirectoryOld/dtanalysis.ini > /tmp/patchfile.patch
grep -n '@@' /tmp/patchfile.patch > patchfileNew.patch
length=`grep -c '.*' /tmp/patchfileNew.patch`
echo $length
if [[ $length == "2" ]]
	then
		deleteFromLine=`grep -n '@@' /tmp/patchfile.patch | cut -c 1-3| tail -1 | grep -o '[0-9]*'`
		deleteToLine=`grep -n "" /tmp/patchfile.patch | cut -c 1-3 | tail -1 | grep -o '[0-9]*'`
		deleteToLine="$deleteToLine"d
		sed -e $deleteFromLine,$deleteToLine patchfile.patch > patchfileNew.patch
	patch -f -p0 < /tmp/patchfileNew.patch
elif [[ $length == "0" ]]; then	echo No patching of .ini file needed
else patch -f -p0 < /tmp/patchfile.patch
fi

#Stop old dynaTrace service
echo Stopping Dynatrace...
$dynatraceDirectoryOld/init.d/dynaTraceAnalysis stop 

#Start new dynaTrace service
echo Starting new Dynatrace service...
$dynatraceDirectoryOld/init.d/dynaTraceAnalysis start

#Removing old Startup scripts
echo Removing old Startup scripts...
cd /etc/init.d/
osVersion=`lsb_release -a | grep 'Distributor ID' -m 1`
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceAnalysis remove
else chkconfig --del dynaTraceAnalysis
fi
rm dynaTraceAnalysis

#Automatic start configuration
echo Adding Startup scripts...
cp $dynatraceDirectoryNew/init.d/dynaTraceAnalysis /etc/init.d/
cd /etc/init.d/
if [[ $osVersion == *Ubuntu* ]]; then update-rc.d dynaTraceAnalysis defaults
else chkconfig --add dynaTraceAnalysis
fi

echo Script Complete